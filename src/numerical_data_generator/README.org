* GENBERT学習用データセット生成プログラム
** 概要
現状, 以下に示すような形式のデータセットを生成することができます
- A=1, B=2, C=3, A+B=   # 値呼出（抽出）→演算
- A=1, B=2, C=3, max(A,B,C)     # 値呼出（抽出）→多段の演算
- A=1, B=2, C=3, who_max(A,B,C)  #  値呼出（抽出）→多段の演算→名前参照
- A=1, B=2, C=3, {X|X>=2}
- A=1+2, B=2+3, C=3+4, A+B=   # 演算→代入→値呼出→演算
- A=1, B=2, C=3, D=A+B, C+D=  #  値呼出（抽出）→演算→代入→値呼出→演算
- A=1, B=2, C=3, D=A+B, E=B+C, D+E= # 2段の演算 (A+B)+(B+C)
- A=1, B=2, C=3, D=A+B, E=D+C, D+E= # 3段の演算 (A+B)+((A+B)+C)

** 使用方法の概要
環境 : python3.7以上

全てのファイルを同一のディレクトリに置き, 
python numerical_data_generation.py
とコマンドを入力すると実行可能です. 

生成するデータの設定はconfig.json, operations.py, reasning_operators.pyを変更することで拡張可能です. 自作の最終的な計算を行う関数(max, who_max等)を作成する場合には, operations.pyにすでに実装されているクラスを参考にしながら, 最終的な計算を行う関数を表現するクラスを追加してください. (詳細はoperation.py参照)　また, 推論途中に行われる計算の内容については, reasning_operators.pyに定義されています. こちらを変更することによって推論途中に行われる計算の内容を拡張することができます. 

また, 
python make_drop_format_data.py
を実行することで, 現在のconfigの設定で生成された質問と解答をdrop形式で出力可能です. 



** config.jsonの内容について

- number_of_symbols 
 - 使用する変数の種類を指定します(A,B,C...など). 最小は2, 最大は52です. 
 - 最初はアルファベット大文字が使われ, 次に子文字が使われます. 

- seed (デフォルトは"seed" : 616)
 - 乱数のシード値です. 

- max_number_of_question 
 - 生成するパッセージの数を制御します
 
- min_value
 - 使用される(変数の代入か足し算に用いられる)数字の最小値を示しています.

- max_value (デフォルトは"max_value" : 9)
 - 使用される(変数の代入か足し算に用いられる)数字の最大値を示しています 
 - 計算結果はこれ以上の値の数字や, マイナスになることもあります. 

- dtype
 - "int" または "float"を指定できます. 

- output_type
 - "ask_last_question" or "ask_all_variables"の2種類です
  - "ask_last_question" : 最終的な計算結果のみを問う形式の問題を出力します. 
  - "ask_all_variables" : 最終的な全ての変数の状態を問う形式の問題を出力します. 

- generation_rules
 - 生成する問題の形式を設定する部分です. 任意の数のルールを追加できます. どのルールで生成するかの選択は"selection_probability"に記述された確率に基づいて行われます. 生成するルールは以下の2種類のタイプがあります. 
  - タイプ 1 : "template"
   - configに記述された形式をテンプレートとしてデータを生成します. 
  - タイプ 2: "random"
   - configに記述された内容をもとに, ランダムな問題を生成します. 

 - 各項目の詳しい意味はconfig_josn_help.txtに記載しました. 
 
